@startuml
' Autogenerated activity diagrams based on routes/web.php, routes/api.php, routes/attendance.php
' Generated by qodo

skinparam activity {
  StartColor #4CAF50
  BarColor #607D8B
  EndColor #F44336
}
skinparam shadowing false

title HumanResources3 - Activity Diagrams

' Page 1 - High-Level User Flow
start
partition Guest {
  :Visit Landing Page (GET /);
  if (Has account?) then (Yes)
    :Go to Login (GET /login);
    :Submit Credentials (POST /login);
    if (Authenticated?) then (Yes)
      :Redirect to Main Dashboard (GET /dashboard);
    else (No)
      :Show Error; 
      :Retry Login;
    endif
  else (No)
    :Open Register (GET /register);
    :Submit Registration (POST /register);
    :Optional: OTP/Google Auth (GET /sendotp, /auth/google);
    if (Registration successful?) then (Yes)
      :Show Success (GET /success);
      :Login;
    else (No)
      :Show Validation Errors;
    endif
  endif
}
partition Employee {
  :Access Employee Dashboard (GET /employee/dashboard);
  fork
    :Manage Profile (GET/PUT /employee/profile);
  fork again
    :Timesheets - create/edit/submit (GET/POST/PUT/PATCH /employee/timesheets...);
  fork again
    :Leave Requests - create/submit (GET/POST /employee/leave-requests...);
  fork again
    :Attendance - manual entry and clock actions (POST /attendance/...);
  fork again
    :Work Schedule view (GET /employee/work-schedule; GET shift-management/api/calendar-data);
  end fork
  :View Notifications (GET /notifications; AJAX recent/count; PATCH mark-read/unread; DELETE);
  :View Reports (GET /reports/* as authorized);
}
partition Admin {
  :Admin Dashboard (GET /admin/dashboard);
  :Manage Employees (GET /admin/employees; profile setup/store);
  :Manage Alerts (CRUD /admin/alerts...);
  :Review Pending Requests (GET /admin/leave-requests/pending, /admin/shift-requests/pending);
}
stop

newpage

' Page 2 - Attendance Flow
title Attendance - Clock and Reporting
start
partition Employee {
  :Open Attendance (GET /attendance/activities or dashboard);
  if (Need manual entry?) then (Yes)
    :Open Manual Entry (GET /attendance/manual-entry);
    :Submit Entry (POST /attendance/manual-entry);
  else (No)
    if (Working?) then (Clock In)
      :Clock In (POST /attendance/clock-in);
      :Work;
      if (Take break?) then (Yes)
        :Start Break (POST /attendance/start-break);
        :Break;
        :End Break (POST /attendance/end-break);
      endif
      :Clock Out (POST /attendance/clock-out);
    endif
  endif
}
partition System/API {
  :Overview/Realtime/Analytics Data (GET /attendance/*-data);
  :Recent Activities Feed (GET /attendance/recent-activities);
  :Department Performance (GET /attendance/department-performance);
  :Export PDFs (GET /attendance/export-*-pdf);
}
stop

newpage

' Page 3 - Employee Self Service: Timesheets
title Employee Self Service - Timesheets
start
partition Employee {
  :List Timesheets (GET /employee/timesheets);
  if (Create new?) then (Yes)
    :Open Create Form (GET /employee/timesheets/create);
    :Submit Timesheet (POST /employee/timesheets);
  endif
  if (Edit existing?) then (Yes)
    :Open Edit (GET /employee/timesheets/{id}/edit);
    :Update (PUT /employee/timesheets/{id});
  endif
  if (Submit for approval?) then (Yes)
    :Submit (PATCH /employee/timesheets/{id}/submit);
  endif
}
partition Manager/HR {
  :View Attendance/Timesheet Reports (GET /reports/attendance);
  :Export Attendance (GET /reports/attendance/export);
}
stop

newpage

' Page 4 - Employee Self Service: Leave Requests
title Employee Self Service - Leave Requests and Approval
start
partition Employee {
  :List Leave Requests (GET /employee/leave-requests);
  :Open Create (GET /employee/leave-requests/create);
  :Submit Request (POST /employee/leave-requests);
  :Await Decision;
}
partition Manager/HR {
  :Leave Admin Dashboard (GET /leave-management/admin-dashboard);
  :Check Pending (GET /leave-management/pending-requests);
  :Open Request (GET /leave-management/requests/{id});
  if (Approve?) then (Yes)
    :Approve (POST /leave-management/requests/{id}/approve);
  else (No)
    :Reject (POST /leave-management/requests/{id}/reject);
  endif
  :Adjust Balances if needed (POST /leave-management/leave-balances/adjust);
  :Check Conflicts (POST /leave-management/check-conflicts);
  :Generate/Export Reports (GET /leave-management/reports, /leave-management/export-report);
}
stop

newpage

' Page 5 - Shift Management
title Shift Management - Templates, Assignments, Calendar
start
partition Manager/HR {
  :Open Shift Management (GET /workScheduleShiftManagement);
  :List Templates (GET shift-management/api/templates);
  if (Create/Update/Delete?) then (Yes)
    :Create Template (POST shift-management/api/templates);
    :View Template (GET shift-management/api/templates/{id});
    :Update Template (PUT shift-management/api/templates/{id});
    :Toggle Active (PATCH shift-management/api/templates/{id}/toggle-status);
    :Delete Template (DELETE shift-management/api/templates/{id});
  endif
  :Get Employees for Assignment (GET shift-management/api/employees);
  :Create Assignment (POST shift-management/api/assignments);
  :Update Assignment (PUT shift-management/api/assignments/{id});
  :Remove Assignment (DELETE shift-management/api/assignments/{id});
  :Load Calendar (GET shift-management/api/calendar-data);
}
partition Employee {
  :View Work Schedule (GET /employee/work-schedule);
  :Submit Shift Requests (GET /employee/shift-requests);
}
stop

newpage

' Page 6 - Employee Management (Managers)
title Employee Management - Profiles and Requests
start
partition Manager/HR {
  :Open Employee Management (GET /employee-management);
  :List Employees (GET /employee-management/employees);
  :Profile Setup (GET/POST /employee-management/employees/{user}/setup, /profile);
  :Update User (PUT /employee-management/users/{user});
  :Delete User (DELETE /employee-management/users/{user});
  :Manage Alerts (CRUD /employee-management/alerts...);
  :Review Requests (GET /employee-management/requests);
  :Update Leave/Shift Status (PATCH /employee-management/*-requests/{id}/status);
  :Employee Portal (GET /employee-management/employee-portal);
}
stop

newpage

' Page 7 - Admin (Admin-only)
title Admin - Employee and Alerts Management
start
partition Admin {
  :Dashboard (GET /admin/dashboard);
  :Employees (GET /admin/employees);
  :Profile Setup (GET/POST /admin/employees/{user}/profile-setup, /profile);
  :Manage Alerts (CRUD /admin/alerts...);
  :Pending Leave/Shift Requests (GET /admin/*-requests/pending);
}
stop

newpage

' Page 8 - Notifications
title Notifications - View and Manage
start
partition Employee {
  :Open Notifications (GET /notifications);
  :View Single (GET /notifications/{id});
  :Fetch Recent (GET /notifications/recent/json);
  :Fetch Count (GET /notifications/count/json);
  if (Mark read/unread?) then (Yes)
    :Mark Read (PATCH /notifications/{id}/read);
    :Mark Unread (PATCH /notifications/{id}/unread);
    :Mark All Read (PATCH /notifications/mark-all-read);
  endif
  if (Delete?) then (Yes)
    :Delete (DELETE /notifications/{id});
    :Clear Read (DELETE /notifications/clear/read);
  endif
}
stop

newpage

' Page 9 - External API: Employee Sync
title External API - Employee Sync Microservice Integration
start
partition External Service {
  :Send Webhook Payload (POST /api/employee-sync/webhook);
  :Batch Sync (POST /api/employee-sync/batch);
}
partition System/API {
  :Receive and Validate Payload;
  :Persist/Update Employees;
  :Update Sync Status;
  if (Authenticated Admin?) then (Yes)
    :Get Sync Status (GET /api/employee-sync/status);
    :Retry Failed (POST /api/employee-sync/retry-failed);
  endif
}
stop

@enduml
